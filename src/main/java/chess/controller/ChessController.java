package chess.controller;import chess.domain.Board;import chess.domain.BoardFactory;import chess.domain.CheckState;import chess.domain.ChessGame;import chess.domain.piece.character.Team;import chess.domain.position.Positions;import chess.dto.BoardDto;import chess.view.Command;import chess.view.InputView;import chess.view.OutputView;import java.util.Arrays;import java.util.Date;import java.util.Map;import java.util.stream.Collectors;public class ChessController {    public void play() {        InputView.inputStartCommand();        Board board = new Board(BoardFactory.generateStartBoard());        ChessGame chessGame = new ChessGame(board);        OutputView.printChessBoard(new BoardDto(board));        Command command;        while (!chessGame.findCheck().isCheckMate()                && (command = InputView.inputCommand()) != Command.END) {            gamePlayByCommand(chessGame, command);        }        printChessScore(chessGame);    }    private void gamePlayByCommand(ChessGame chessGame, Command command) {        if(command == Command.STATUS) {            printChessScore(chessGame);        }        if(command == Command.MOVE) {            moveChess(chessGame);        }    }    private void printChessScore(ChessGame chessGame) {        OutputView.printScore(chessGame.findOutcome(), chessGame.mapTeamAndScore());    }    private void moveChess(ChessGame chessGame) {        Positions positions = InputView.inputPositions();        chessGame.movePiece(positions);        OutputView.printChessBoard(new BoardDto(chessGame.getBoard()));        OutputView.printCheck(chessGame.findCheck());    }}